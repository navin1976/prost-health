---
// Clinical Risk Visualization Component
// Evidence-based medical comparison with anime.js animations and Material Symbols
---

<!-- Import Material Symbols from Google Fonts -->
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" />

<div class="clinical-visualization" id="clinical-viz">
  <!-- Header with clear clinical context -->
  <div class="viz-header">
    <div class="header-content">
      <h3 class="viz-title">Clinical Outcomes: Real Patient Impact</h3>
      <p class="viz-subtitle">Per 100 Patients Screened</p>
    </div>
    <div class="method-toggle">
      <button class="method-btn active" data-method="mri">
        <svg class="method-icon" viewBox="0 0 24 24" fill="currentColor">
          <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>
        </svg>
        <span class="method-name">MRI-First</span>
      </button>
      <button class="method-btn" data-method="traditional">
        <svg class="method-icon" viewBox="0 0 24 24" fill="currentColor">
          <path d="M15 8H9V6h6v2zm0 4H9v-2h6v2zm0 4H9v-2h6v2zM3 22l1.5-1.5L6 22l1.5-1.5L9 22l1.5-1.5L12 22l1.5-1.5L15 22l1.5-1.5L18 22l1.5-1.5L21 22V2l-1.5 1.5L18 2l-1.5 1.5L15 2l-1.5 1.5L12 2l-1.5 1.5L9 2 7.5 3.5 6 2 4.5 3.5 3 2v20z"/>
        </svg>
        <span class="method-name">Traditional Biopsy</span>
      </button>
    </div>
  </div>

  <!-- Main visualization area -->
  <div class="viz-main">
    <!-- Accuracy Visualization -->
    <div class="metric-section">
      <div class="metric-header">
        <div class="metric-title">
          <svg class="metric-icon" viewBox="0 0 24 24" fill="currentColor">
            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
          </svg>
          <h4>Cancers Correctly Identified</h4>
        </div>
        <div class="metric-value" id="accuracy-value">96/100</div>
      </div>
      <div class="icon-grid-container">
        <div class="icon-grid" id="accuracy-grid">
          <!-- Icons will be generated by JavaScript -->
        </div>
        <div class="grid-legend">
          <div class="legend-item">
            <span class="material-symbols-outlined legend-icon success">sentiment_satisfied</span>
            <span>Detected</span>
          </div>
          <div class="legend-item">
            <span class="material-symbols-outlined legend-icon danger">sentiment_very_dissatisfied</span>
            <span>Missed</span>
          </div>
        </div>
      </div>
    </div>

    <!-- Complications Visualization -->
    <div class="metric-section">
      <div class="metric-header">
        <div class="metric-title">
          <svg class="metric-icon" viewBox="0 0 24 24" fill="currentColor">
            <path d="M20.5 6c-2.61.7-5.67 1-8.5 1s-5.89-.3-8.5-1L3 8c1.86.5 4 .83 6 1v13h2v-6h2v6h2V9c2-.17 4.14-.5 6-1l-.5-2zM12 6c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2z"/>
          </svg>
          <h4>Patients With Complications</h4>
        </div>
        <div class="metric-value" id="complication-value">2/100</div>
      </div>
      <div class="icon-grid-container">
        <div class="icon-grid" id="complication-grid">
          <!-- Icons will be generated by JavaScript -->
        </div>
        <div class="grid-legend">
          <div class="legend-item">
            <span class="material-symbols-outlined legend-icon success">check_circle</span>
            <span>No Issues</span>
          </div>
          <div class="legend-item">
            <span class="material-symbols-outlined legend-icon danger">report</span>
            <span>Complications</span>
          </div>
        </div>
      </div>
    </div>

    <!-- Unnecessary Procedures Visualization -->
    <div class="metric-section">
      <div class="metric-header">
        <div class="metric-title">
          <svg class="metric-icon" viewBox="0 0 24 24" fill="currentColor">
            <path d="M14.59 8L12 10.59 9.41 8 8 9.41 10.59 12 8 14.59 9.41 16 12 13.41 14.59 16 16 14.59 13.41 12 16 9.41 14.59 8zM12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>
          </svg>
          <h4>Unnecessary Procedures Avoided</h4>
        </div>
        <div class="metric-value" id="unnecessary-value">96/100</div>
      </div>
      <div class="icon-grid-container">
        <div class="icon-grid" id="unnecessary-grid">
          <!-- Icons will be generated by JavaScript -->
        </div>
        <div class="grid-legend">
          <div class="legend-item">
            <span class="material-symbols-outlined legend-icon success">thumb_up</span>
            <span>Appropriate</span>
          </div>
          <div class="legend-item">
            <span class="material-symbols-outlined legend-icon warning">warning</span>
            <span>Unnecessary</span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Clinical Summary -->
  <div class="clinical-summary">
    <div class="summary-content">
      <h4 class="summary-title">Clinical Significance</h4>
      <p class="summary-text" id="summary-text">
        MRI-first approach reduces unnecessary procedures by 70% while maintaining 96% sensitivity for clinically significant cancer.
      </p>
    </div>
    <div class="evidence-badge">
      <svg class="badge-icon" viewBox="0 0 24 24" fill="currentColor">
        <path d="M9 11H7v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v11z"/>
      </svg>
      <span class="badge-text">NICE Guidelines Supported</span>
    </div>
  </div>
</div>

<style>
  .clinical-visualization {
    background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
    border-radius: 20px;
    padding: 2.5rem;
    margin: 2rem 0;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
    border: 2px solid #e2e8f0;
  }

  .viz-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 3rem;
    flex-wrap: wrap;
    gap: 1.5rem;
  }

  .header-content {
    flex: 1;
  }

  .viz-title {
    font-size: 2rem;
    font-weight: 700;
    color: #0f172a;
    margin: 0 0 0.375rem 0;
    font-family: var(--font-serif);
  }

  .viz-subtitle {
    font-size: 1.125rem;
    color: #64748b;
    margin: 0;
    font-weight: 600;
  }

  .method-toggle {
    display: flex;
    background: white;
    border-radius: 14px;
    padding: 0.5rem;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);
    border: 2px solid #e2e8f0;
  }

  .method-btn {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem 1.5rem;
    border: none;
    background: transparent;
    border-radius: 10px;
    cursor: pointer;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    font-weight: 600;
    color: #475569;
  }

  .method-btn:hover {
    background: #f1f5f9;
    transform: translateY(-2px);
  }

  .method-btn.active {
    background: var(--color-accent, #1B4332);
    color: white;
    box-shadow: 0 8px 20px rgba(27, 67, 50, 0.4);
    transform: translateY(-2px);
  }

  .method-icon {
    width: 1.625rem;
    height: 1.625rem;
  }

  .method-name {
    font-size: 1rem;
    font-weight: 700;
  }

  .viz-main {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(340px, 1fr));
    gap: 2rem;
    margin-bottom: 2.5rem;
  }

  .metric-section {
    background: white;
    border-radius: 16px;
    padding: 2rem;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.08);
    border: 2px solid #f1f5f9;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .metric-section:hover {
    transform: translateY(-6px);
    box-shadow: 0 16px 40px rgba(0, 0, 0, 0.15);
    border-color: var(--color-accent, #1B4332);
  }

  .metric-header {
    display: grid;
    grid-template-columns: 1fr auto;
    gap: 1rem;
    align-items: center;
    margin-bottom: 1.5rem;
    min-height: 3.5rem;
  }

  .metric-title {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .metric-title h4 {
    font-size: 1rem;
    font-weight: 700;
    color: #0f172a;
    margin: 0;
    line-height: 1.4;
  }

  .metric-icon {
    width: 1.5rem;
    height: 1.5rem;
    color: var(--color-accent, #1B4332);
    flex-shrink: 0;
  }

  .metric-value {
    font-size: 1.75rem;
    font-weight: 800;
    color: var(--color-accent, #1B4332);
    font-variant-numeric: tabular-nums;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    white-space: nowrap;
  }

  .icon-grid-container {
    margin-top: 1.75rem;
  }

  .icon-grid {
    display: grid;
    grid-template-columns: repeat(10, 1fr);
    gap: 0.375rem;
    margin-bottom: 1.25rem;
    width: 100%;
  }

  .grid-icon {
    width: 100%;
    aspect-ratio: 1;
    border-radius: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    position: relative;
    background: transparent !important;
    border: 2px solid rgba(0, 0, 0, 0.05);
    /* Initial state for anime.js */
    opacity: 0;
    transform: scale(0);
  }

  .grid-icon .material-symbols-outlined {
    font-size: 1.25rem;
    font-weight: 400;
  }

  .grid-icon:hover {
    transform: scale(1.3) !important;
    border-color: rgba(0, 0, 0, 0.1);
    z-index: 10;
  }

  /* Success icons - GREEN ICON COLOR */
  .grid-icon.success :global(.material-symbols-outlined) {
    color: #10b981 !important;
  }

  .grid-icon.success:hover :global(.material-symbols-outlined) {
    color: #059669 !important;
  }

  /* Warning icons - AMBER ICON COLOR */
  .grid-icon.warning :global(.material-symbols-outlined) {
    color: #f59e0b !important;
  }

  .grid-icon.warning:hover :global(.material-symbols-outlined) {
    color: #d97706 !important;
  }

  /* Danger icons - RED ICON COLOR */
  .grid-icon.danger :global(.material-symbols-outlined) {
    color: #ef4444 !important;
  }

  .grid-icon.danger:hover :global(.material-symbols-outlined) {
    color: #dc2626 !important;
  }

  .grid-legend {
    display: flex;
    gap: 2rem;
    justify-content: center;
    flex-wrap: wrap;
    padding-top: 0.75rem;
    border-top: 2px solid #f1f5f9;
  }

  .legend-item {
    display: flex;
    align-items: center;
    gap: 0.625rem;
    font-size: 0.9375rem;
    font-weight: 600;
    color: #475569;
  }

  .legend-icon {
    font-size: 1.75rem !important;
  }

  .legend-icon.success {
    color: #10b981;
  }

  .legend-icon.warning {
    color: #f59e0b;
  }

  .legend-icon.danger {
    color: #ef4444;
  }

  .clinical-summary {
    background: linear-gradient(135deg, var(--color-accent, #1B4332) 0%, var(--color-accent-hover, #2D5A3D) 100%);
    border-radius: 16px;
    padding: 2rem;
    color: white;
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 2rem;
    box-shadow: 0 12px 32px rgba(27, 67, 50, 0.3);
  }

  .summary-content {
    flex: 1;
  }

  .summary-title {
    font-size: 1.375rem;
    font-weight: 700;
    margin: 0 0 0.75rem 0;
    font-family: var(--font-serif);
    color: white;
  }

  .summary-text {
    font-size: 1rem;
    line-height: 1.6;
    opacity: 0.95;
    margin: 0;
    transition: all 0.4s ease;
    color: white;
  }

  .evidence-badge {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    background: rgba(255, 255, 255, 0.2);
    padding: 1rem 1.5rem;
    border-radius: 12px;
    backdrop-filter: blur(10px);
    border: 2px solid rgba(255, 255, 255, 0.3);
  }

  .badge-icon {
    width: 1.75rem;
    height: 1.75rem;
    fill: white;
  }

  .badge-text {
    font-size: 1rem;
    font-weight: 700;
  }

  /* Mobile optimizations */
  @media (max-width: 768px) {
    .clinical-visualization {
      padding: 1.5rem;
      margin: 1rem 0;
    }

    .viz-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 1.25rem;
      margin-bottom: 2rem;
    }

    .method-toggle {
      width: 100%;
    }

    .method-btn {
      flex: 1;
      justify-content: center;
      padding: 0.875rem 1rem;
    }

    .viz-main {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }

    .icon-grid {
      grid-template-columns: repeat(10, 1fr);
      gap: 0.375rem;
    }

    .grid-icon .material-symbols-outlined {
      font-size: 1.125rem;
    }

    .clinical-summary {
      flex-direction: column;
      text-align: center;
      gap: 1.25rem;
      padding: 1.5rem;
    }

    .viz-title {
      font-size: 1.5rem;
    }

    .metric-value {
      font-size: 1.625rem;
    }
  }

  @media (max-width: 480px) {
    .icon-grid {
      grid-template-columns: repeat(10, 1fr);
      gap: 0.3rem;
    }

    .grid-icon .material-symbols-outlined {
      font-size: 1rem;
    }
  }
</style>

<script>
  import anime from 'animejs';

  console.log('Anime.js loaded:', typeof anime, anime);

  // Clinical data based on medical evidence
  const clinicalData = {
    mri: {
      accuracy: {
        value: '96/100',
        success: 96,
        danger: 4,
        icons: { 
          success: 'sentiment_satisfied', 
          danger: 'sentiment_very_dissatisfied' 
        }
      },
      complications: {
        value: '2/100',
        success: 98,
        danger: 2,
        icons: { 
          success: 'check_circle', 
          danger: 'report' 
        }
      },
      unnecessary: {
        value: '96/100',
        success: 96,
        warning: 4,
        icons: { 
          success: 'thumb_up', 
          warning: 'warning' 
        }
      },
      summary: 'MRI-first approach reduces unnecessary procedures by 70% while maintaining 96% sensitivity for clinically significant cancer.'
    },
    traditional: {
      accuracy: {
        value: '75/100',
        success: 75,
        danger: 25,
        icons: { 
          success: 'sentiment_satisfied', 
          danger: 'sentiment_very_dissatisfied' 
        }
      },
      complications: {
        value: '25/100',
        success: 75,
        danger: 25,
        icons: { 
          success: 'check_circle', 
          danger: 'report' 
        }
      },
      unnecessary: {
        value: '65/100',
        success: 65,
        warning: 35,
        icons: { 
          success: 'thumb_up', 
          warning: 'warning' 
        }
      },
      summary: 'Traditional biopsy leads to higher complication rates and unnecessary procedures due to blind sampling approach.'
    }
  };

  let currentMethod = 'mri';
  let isAnimating = false;
  let hasInitialized = false;

  // Create icon grid visualization with clustering and Material Symbols
  function createIconGrid(containerId, data) {
    const container = document.getElementById(containerId);
    if (!container) {
      console.warn('Container not found:', containerId);
      return;
    }

    // Clear existing icons and stop any animations
    const existingIcons = container.querySelectorAll('.grid-icon');
    if (existingIcons.length > 0) {
      anime.remove(existingIcons);
    }
    container.innerHTML = '';
    
    console.log(`Creating ${containerId} with ${data.success + (data.warning || 0) + (data.danger || 0)} icons`);
    
    const icons_array = [];
    
    // Create success icons first (clustered)
    for (let i = 0; i < (data.success || 0); i++) {
      icons_array.push({ 
        type: 'success', 
        icon: data.icons.success 
      });
    }
    
    // Add warning icons (clustered)
    for (let i = 0; i < (data.warning || 0); i++) {
      icons_array.push({ 
        type: 'warning', 
        icon: data.icons.warning 
      });
    }
    
    // Add danger icons (clustered)
    for (let i = 0; i < (data.danger || 0); i++) {
      icons_array.push({ 
        type: 'danger', 
        icon: data.icons.danger 
      });
    }
    
    // Create icon elements with colored Material Symbols
    icons_array.forEach((iconData, index) => {
      const icon = document.createElement('div');
      icon.className = `grid-icon ${iconData.type}`;
      
      // Determine color based on type
      let iconColor = '#10b981'; // success green
      if (iconData.type === 'warning') iconColor = '#f59e0b'; // amber
      if (iconData.type === 'danger') iconColor = '#ef4444'; // red
      
      // Create span with inline style to force color
      icon.innerHTML = `<span class="material-symbols-outlined" style="color: ${iconColor} !important;">${iconData.icon}</span>`;
      icon.setAttribute('data-index', index);
      icon.setAttribute('data-type', iconData.type);
      
      container.appendChild(icon);
    });

    // Animate with anime.js - cleaner spring entrance (NO setTimeout delay!)
    console.log(`Animating ${containerId} icons`);
    anime({
      targets: `#${containerId} .grid-icon`,
      opacity: [0, 1],
      scale: [0, 1.1, 1],   // Less overshoot - cleaner
      duration: 500,
      delay: anime.stagger(12, {
        grid: [10, 10], 
        from: 'first',
        direction: 'normal'
      }),
      easing: 'spring(1, 80, 10, 0)'
    });
  }

  // Update visualization with anime.js transitions
  function updateVisualization(method) {
    if (isAnimating) {
      console.log('Animation already in progress, skipping...');
      return;
    }
    
    if (currentMethod === method && hasInitialized) {
      console.log('Already showing this method, skipping...');
      return;
    }
    
    isAnimating = true;
    currentMethod = method;
    const data = clinicalData[method];
    
    // Animate metric values
    const accuracyValue = document.getElementById('accuracy-value');
    const complicationValue = document.getElementById('complication-value');
    const unnecessaryValue = document.getElementById('unnecessary-value');
    
    // Anime.js value animation
    anime({
      targets: [accuracyValue, complicationValue, unnecessaryValue],
      opacity: [1, 0],
      translateY: [0, -20],
      duration: 300,
      easing: 'easeInQuad',
      complete: () => {
        accuracyValue.textContent = data.accuracy.value;
        complicationValue.textContent = data.complications.value;
        unnecessaryValue.textContent = data.unnecessary.value;
        
        anime({
          targets: [accuracyValue, complicationValue, unnecessaryValue],
          opacity: [0, 1],
          translateY: [20, 0],
          duration: 400,
          easing: 'easeOutQuad'
        });
      }
    });
    
    // Animate summary text
    const summaryText = document.getElementById('summary-text');
    anime({
      targets: summaryText,
      opacity: [1, 0],
      translateX: [0, -30],
      duration: 300,
      easing: 'easeInQuad',
      complete: () => {
        summaryText.textContent = data.summary;
        anime({
          targets: summaryText,
          opacity: [0, 1],
          translateX: [30, 0],
          duration: 400,
          easing: 'easeOutQuad'
        });
      }
    });
    
    // Animate out existing icons - FAST exit, no stagger
    const existingIcons = document.querySelectorAll('.grid-icon');
    if (existingIcons.length > 0 && hasInitialized) {
      console.log(`Exiting ${existingIcons.length} icons`);
      
      // First stop any running animations on these icons
      anime.remove(existingIcons);
      
      anime({
        targets: existingIcons,
        opacity: [1, 0],
        scale: [1, 0],
        duration: 200,  // Very fast exit
        delay: 0,       // NO STAGGER - all at once
        easing: 'easeInQuad',
        complete: () => {
          console.log('Exit complete, clearing grids');
          
          // Clear grids immediately
          document.getElementById('accuracy-grid').innerHTML = '';
          document.getElementById('complication-grid').innerHTML = '';
          document.getElementById('unnecessary-grid').innerHTML = '';
          
          // Wait a frame before creating new icons
          requestAnimationFrame(() => {
            console.log('Creating new grids for', method);
            
            // Create all three grids sequentially with small delays
            setTimeout(() => createIconGrid('accuracy-grid', data.accuracy), 0);
            setTimeout(() => createIconGrid('complication-grid', data.complications), 150);
            setTimeout(() => createIconGrid('unnecessary-grid', data.unnecessary), 300);
            
            setTimeout(() => {
              console.log('Animation complete, unlocking');
              isAnimating = false;
            }, 2000);
          });
        }
      });
    } else {
      // First time initialization
      console.log('First time init');
      
      setTimeout(() => createIconGrid('accuracy-grid', data.accuracy), 0);
      setTimeout(() => createIconGrid('complication-grid', data.complications), 150);
      setTimeout(() => createIconGrid('unnecessary-grid', data.unnecessary), 300);
      
      hasInitialized = true;
      
      setTimeout(() => {
        isAnimating = false;
      }, 2000);
    }
    
    // Update button states with animation
    document.querySelectorAll('.method-btn').forEach(btn => {
      if (btn.dataset.method === method) {
        btn.classList.add('active');
        anime({
          targets: btn,
          scale: [0.95, 1],
          duration: 300,
          easing: 'easeOutElastic(1, .6)'
        });
      } else {
        btn.classList.remove('active');
      }
    });
  }

  // Initialize visualization
  document.addEventListener('DOMContentLoaded', () => {
    // Set up button handlers
    document.querySelectorAll('.method-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        updateVisualization(btn.dataset.method);
      });
    });
    
    // Use Intersection Observer to trigger animation when in view
    const vizContainer = document.getElementById('clinical-viz');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting && !hasInitialized) {
          console.log('Visualization entered view - initializing');
          // Trigger animation when 20% visible
          setTimeout(() => {
            updateVisualization('mri');
          }, 200);
          // Stop observing after first trigger
          observer.unobserve(vizContainer);
        }
      });
    }, {
      threshold: 0.2,  // Trigger when 20% visible
      rootMargin: '0px'
    });
    
    if (vizContainer) {
      observer.observe(vizContainer);
    }
    
    // Add pulse animation to metric sections on hover
    document.querySelectorAll('.metric-section').forEach(section => {
      section.addEventListener('mouseenter', () => {
        const icon = section.querySelector('.metric-icon');
        if (icon) {
          anime({
            targets: icon,
            scale: [1, 1.2, 1],
            rotate: [0, 10, 0],
            duration: 600,
            easing: 'easeInOutQuad'
          });
        }
      });
    });
  });
</script>
