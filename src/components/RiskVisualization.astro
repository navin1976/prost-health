---
// Risk Visualization Component
// Lightweight 3D visualization for prostate cancer risk comparison
---

<div class="risk-visualization-container" id="risk-viz-container">
  <canvas id="risk-canvas"></canvas>
  
  <!-- Fallback content -->
  <div class="viz-fallback" id="viz-fallback">
    <div class="fallback-content">
      <h3 class="fallback-title">The Clarity Compass</h3>
      <div class="comparison-chart">
        <div class="chart-item">
          <div class="chart-label">MRI-First Approach</div>
          <div class="chart-bar mri-bar">
            <div class="chart-fill"></div>
          </div>
          <div class="chart-value">96% Accuracy</div>
        </div>
        <div class="chart-item">
          <div class="chart-label">Traditional Biopsy</div>
          <div class="chart-bar traditional-bar">
            <div class="chart-fill"></div>
          </div>
          <div class="chart-value">75% Accuracy</div>
        </div>
      </div>
      <div class="fallback-stats">
        <div class="stat-item">
          <span class="stat-label">Complications:</span>
          <span class="stat-value" id="complication-stat">1-2%</span>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Mobile-friendly controls -->
  <div class="viz-controls">
    <button class="viz-btn active" data-path="mri">MRI-First Approach</button>
    <button class="viz-btn" data-path="traditional">Traditional Biopsy</button>
  </div>
  
  <!-- Mobile info panel -->
  <div class="viz-info-panel">
    <h3 class="viz-title">The Clarity Compass</h3>
    <p class="viz-description" id="viz-description">
      MRI-first screening provides 96% accuracy in ruling out aggressive cancer while minimizing unnecessary procedures.
    </p>
    <div class="viz-stats">
      <div class="stat-item">
        <span class="stat-label">Accuracy:</span>
        <span class="stat-value" id="accuracy-stat">96%</span>
      </div>
      <div class="stat-item">
        <span class="stat-label">Complications:</span>
        <span class="stat-value" id="complication-stat">1-2%</span>
      </div>
    </div>
  </div>
</div>

<style>
  .risk-visualization-container {
    position: relative;
    width: 100%;
    height: 400px;
    max-height: 50vh;
    background: linear-gradient(135deg, #0a0a0a 0%, #1a1a1a 100%);
    border-radius: 12px;
    overflow: hidden;
    margin: 2rem 0;
  }

  #risk-canvas {
    width: 100%;
    height: 100%;
    display: none;
  }

  .viz-controls {
    position: absolute;
    top: 1rem;
    left: 1rem;
    right: 1rem;
    display: flex;
    gap: 0.5rem;
    z-index: 10;
  }

  .viz-btn {
    flex: 1;
    padding: 0.5rem 1rem;
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 8px;
    color: white;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .viz-btn:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: translateY(-1px);
  }

  .viz-btn.active {
    background: var(--color-accent, #1B4332);
    border-color: var(--color-accent, #1B4332);
  }

  .viz-info-panel {
    position: absolute;
    bottom: 1rem;
    left: 1rem;
    right: 1rem;
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(10px);
    border-radius: 8px;
    padding: 1rem;
    color: white;
    z-index: 10;
  }

  .viz-title {
    font-size: 1.125rem;
    font-weight: 600;
    margin: 0 0 0.5rem 0;
    font-family: var(--font-serif);
  }

  .viz-description {
    font-size: 0.875rem;
    line-height: 1.4;
    margin: 0 0 1rem 0;
    opacity: 0.9;
  }

  .viz-stats {
    display: flex;
    gap: 1rem;
  }

  .stat-item {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .stat-label {
    font-size: 0.75rem;
    opacity: 0.7;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .stat-value {
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--color-accent, #1B4332);
  }

  /* Fallback visualization */
  .viz-fallback {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, #0a0a0a 0%, #1a1a1a 100%);
    border-radius: 12px;
    padding: 2rem;
  }

  .fallback-content {
    text-align: center;
    color: white;
    width: 100%;
  }

  .fallback-title {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 1.5rem;
    font-family: var(--font-serif);
  }

  .comparison-chart {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    margin: 1.5rem 0;
  }

  .chart-item {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .chart-label {
    font-size: 0.875rem;
    font-weight: 500;
    text-align: left;
  }

  .chart-bar {
    height: 24px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 4px;
    overflow: hidden;
    position: relative;
  }

  .chart-fill {
    height: 100%;
    border-radius: 4px;
    transition: width 0.8s ease;
    position: relative;
    overflow: hidden;
  }

  .chart-fill::after {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    animation: shimmer 2s infinite;
  }

  .mri-bar .chart-fill {
    width: 96%;
    background: linear-gradient(90deg, #1B4332, #2D5A3D);
  }

  .traditional-bar .chart-fill {
    width: 75%;
    background: linear-gradient(90deg, #DC2626, #EF4444);
  }

  .chart-value {
    font-size: 0.875rem;
    font-weight: 600;
    text-align: right;
  }

  .fallback-stats {
    margin-top: 1.5rem;
    display: flex;
    justify-content: center;
    gap: 2rem;
  }

  @keyframes shimmer {
    0% {
      left: -100%;
    }
    100% {
      left: 100%;
    }
  }

  /* Mobile optimizations */
  @media (max-width: 768px) {
    .risk-visualization-container {
      height: 300px;
      max-height: 40vh;
      margin: 1rem 0;
    }

    .viz-controls {
      top: 0.5rem;
      left: 0.5rem;
      right: 0.5rem;
    }

    .viz-btn {
      padding: 0.375rem 0.75rem;
      font-size: 0.75rem;
    }

    .viz-info-panel {
      bottom: 0.5rem;
      left: 0.5rem;
      right: 0.5rem;
      padding: 0.75rem;
    }

    .viz-title {
      font-size: 1rem;
    }

    .viz-description {
      font-size: 0.8rem;
      margin-bottom: 0.75rem;
    }

    .viz-stats {
      gap: 0.75rem;
    }

    .stat-value {
      font-size: 1rem;
    }

    .fallback-title {
      font-size: 1.25rem;
    }

    .comparison-chart {
      gap: 1rem;
    }

    .chart-bar {
      height: 20px;
    }

    .fallback-stats {
      flex-direction: column;
      gap: 0.75rem;
    }
  }

  @media (max-width: 480px) {
    .risk-visualization-container {
      height: 250px;
      max-height: 35vh;
    }

    .chart-label {
      font-size: 0.75rem;
    }

    .chart-value {
      font-size: 0.75rem;
    }
  }
</style>

<script>
  // Visualization data
  const pathwayData = {
    mri: {
      title: "MRI-First Approach",
      description: "MRI-first screening provides 96% accuracy in ruling out aggressive cancer while minimizing unnecessary procedures.",
      accuracy: "96%",
      complications: "1-2%",
      chartWidth: "96%"
    },
    traditional: {
      title: "Traditional Biopsy",
      description: "Traditional biopsy carries higher complication risks and may miss or over-diagnose certain conditions.",
      accuracy: "70-80%",
      complications: "15-30%",
      chartWidth: "75%"
    }
  };

  let currentPathway = 'mri';

  // Switch pathway
  function switchPathway(pathway) {
    currentPathway = pathway;
    
    // Update UI
    const data = pathwayData[pathway];
    document.getElementById('viz-description').textContent = data.description;
    document.getElementById('accuracy-stat').textContent = data.accuracy;
    document.getElementById('complication-stat').textContent = data.complications;
    
    // Update chart animations
    const mriFill = document.querySelector('.mri-bar .chart-fill');
    const traditionalFill = document.querySelector('.traditional-bar .chart-fill');
    
    if (pathway === 'mri') {
      mriFill.style.width = '96%';
      traditionalFill.style.width = '75%';
    } else {
      mriFill.style.width = '85%';
      traditionalFill.style.width = '80%';
    }
    
    // Update button states
    document.querySelectorAll('.viz-btn').forEach(btn => {
      btn.classList.toggle('active', btn.dataset.path === pathway);
    });
  }

  // Initialize when component is ready
  document.addEventListener('DOMContentLoaded', () => {
    // Setup button handlers
    document.querySelectorAll('.viz-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        switchPathway(btn.dataset.path);
      });
    });

    // Initialize chart animations
    setTimeout(() => {
      const mriFill = document.querySelector('.mri-bar .chart-fill');
      const traditionalFill = document.querySelector('.traditional-bar .chart-fill');
      
      if (mriFill) mriFill.style.width = '96%';
      if (traditionalFill) traditionalFill.style.width = '75%';
    }, 500);
  });

  // Attempt to load Three.js for enhanced visualization
  async function loadThreeJSVisualization() {
    try {
      // Check if Three.js is available
      if (typeof THREE !== 'undefined') {
        const canvas = document.getElementById('risk-canvas');
        const fallback = document.getElementById('viz-fallback');
        
        if (canvas && fallback) {
          // Initialize Three.js scene
          const scene = new THREE.Scene();
          const camera = new THREE.PerspectiveCamera(75, canvas.clientWidth / canvas.clientHeight, 0.1, 1000);
          const renderer = new THREE.WebGLRenderer({ canvas, antialias: true, alpha: true });
          
          renderer.setSize(canvas.clientWidth, canvas.clientHeight);
          camera.position.z = 5;
          
          // Create simple particle system
          const geometry = new THREE.BufferGeometry();
          const vertices = [];
          
          for (let i = 0; i < 1000; i++) {
            vertices.push(
              (Math.random() - 0.5) * 10,
              (Math.random() - 0.5) * 10,
              (Math.random() - 0.5) * 10
            );
          }
          
          geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));
          
          const material = new THREE.PointsMaterial({
            color: 0x1B4332,
            size: 0.05,
            transparent: true,
            opacity: 0.8
          });
          
          const particles = new THREE.Points(geometry, material);
          scene.add(particles);
          
          // Animation loop
          function animate() {
            requestAnimationFrame(animate);
            particles.rotation.y += 0.002;
            particles.rotation.x += 0.001;
            renderer.render(scene, camera);
          }
          
          animate();
          
          // Show canvas, hide fallback
          canvas.style.display = 'block';
          fallback.style.display = 'none';
        }
      }
    } catch (error) {
      console.log('Three.js visualization not available, using fallback');
    }
  }

  // Try to load enhanced visualization after a short delay
  setTimeout(loadThreeJSVisualization, 1000);
</script>